/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/projectcalico/cni-plugin/pkg/k8s/apis/serviceippool/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceIPPoolLister helps list ServiceIPPools.
type ServiceIPPoolLister interface {
	// List lists all ServiceIPPools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceIPPool, err error)
	// ServiceIPPools returns an object that can list and get ServiceIPPools.
	ServiceIPPools(namespace string) ServiceIPPoolNamespaceLister
	ServiceIPPoolListerExpansion
}

// serviceIPPoolLister implements the ServiceIPPoolLister interface.
type serviceIPPoolLister struct {
	indexer cache.Indexer
}

// NewServiceIPPoolLister returns a new ServiceIPPoolLister.
func NewServiceIPPoolLister(indexer cache.Indexer) ServiceIPPoolLister {
	return &serviceIPPoolLister{indexer: indexer}
}

// List lists all ServiceIPPools in the indexer.
func (s *serviceIPPoolLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceIPPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceIPPool))
	})
	return ret, err
}

// ServiceIPPools returns an object that can list and get ServiceIPPools.
func (s *serviceIPPoolLister) ServiceIPPools(namespace string) ServiceIPPoolNamespaceLister {
	return serviceIPPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceIPPoolNamespaceLister helps list and get ServiceIPPools.
type ServiceIPPoolNamespaceLister interface {
	// List lists all ServiceIPPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceIPPool, err error)
	// Get retrieves the ServiceIPPool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServiceIPPool, error)
	ServiceIPPoolNamespaceListerExpansion
}

// serviceIPPoolNamespaceLister implements the ServiceIPPoolNamespaceLister
// interface.
type serviceIPPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceIPPools in the indexer for a given namespace.
func (s serviceIPPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceIPPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceIPPool))
	})
	return ret, err
}

// Get retrieves the ServiceIPPool from the indexer for a given namespace and name.
func (s serviceIPPoolNamespaceLister) Get(name string) (*v1alpha1.ServiceIPPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceippool"), name)
	}
	return obj.(*v1alpha1.ServiceIPPool), nil
}
